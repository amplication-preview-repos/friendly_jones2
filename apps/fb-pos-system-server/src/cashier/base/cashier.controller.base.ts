/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CashierService } from "../cashier.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CashierCreateInput } from "./CashierCreateInput";
import { Cashier } from "./Cashier";
import { CashierFindManyArgs } from "./CashierFindManyArgs";
import { CashierWhereUniqueInput } from "./CashierWhereUniqueInput";
import { CashierUpdateInput } from "./CashierUpdateInput";
import { BillingFindManyArgs } from "../../billing/base/BillingFindManyArgs";
import { Billing } from "../../billing/base/Billing";
import { BillingWhereUniqueInput } from "../../billing/base/BillingWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CashierControllerBase {
  constructor(
    protected readonly service: CashierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cashier })
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCashier(
    @common.Body() data: CashierCreateInput
  ): Promise<Cashier> {
    return await this.service.createCashier({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        phoneNumber: true,
        restaurant: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Cashier] })
  @ApiNestedQuery(CashierFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cashiers(@common.Req() request: Request): Promise<Cashier[]> {
    const args = plainToClass(CashierFindManyArgs, request.query);
    return this.service.cashiers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        phoneNumber: true,
        restaurant: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cashier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cashier(
    @common.Param() params: CashierWhereUniqueInput
  ): Promise<Cashier | null> {
    const result = await this.service.cashier({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        phoneNumber: true,
        restaurant: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cashier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCashier(
    @common.Param() params: CashierWhereUniqueInput,
    @common.Body() data: CashierUpdateInput
  ): Promise<Cashier | null> {
    try {
      return await this.service.updateCashier({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          phoneNumber: true,
          restaurant: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cashier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCashier(
    @common.Param() params: CashierWhereUniqueInput
  ): Promise<Cashier | null> {
    try {
      return await this.service.deleteCashier({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          phoneNumber: true,
          restaurant: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billings")
  @ApiNestedQuery(BillingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Billing",
    action: "read",
    possession: "any",
  })
  async findBillings(
    @common.Req() request: Request,
    @common.Param() params: CashierWhereUniqueInput
  ): Promise<Billing[]> {
    const query = plainToClass(BillingFindManyArgs, request.query);
    const results = await this.service.findBillings(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        paymentMethod: true,
        billNumber: true,
        order: true,

        cashier: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billings")
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "update",
    possession: "any",
  })
  async connectBillings(
    @common.Param() params: CashierWhereUniqueInput,
    @common.Body() body: BillingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billings: {
        connect: body,
      },
    };
    await this.service.updateCashier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billings")
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "update",
    possession: "any",
  })
  async updateBillings(
    @common.Param() params: CashierWhereUniqueInput,
    @common.Body() body: BillingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billings: {
        set: body,
      },
    };
    await this.service.updateCashier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billings")
  @nestAccessControl.UseRoles({
    resource: "Cashier",
    action: "update",
    possession: "any",
  })
  async disconnectBillings(
    @common.Param() params: CashierWhereUniqueInput,
    @common.Body() body: BillingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billings: {
        disconnect: body,
      },
    };
    await this.service.updateCashier({
      where: params,
      data,
      select: { id: true },
    });
  }
}
