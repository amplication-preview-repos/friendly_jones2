/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tables as PrismaTables,
  Waiter as PrismaWaiter,
} from "@prisma/client";

export class TablesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TablesCountArgs, "select">): Promise<number> {
    return this.prisma.tables.count(args);
  }

  async tablesItems(args: Prisma.TablesFindManyArgs): Promise<PrismaTables[]> {
    return this.prisma.tables.findMany(args);
  }
  async tables(
    args: Prisma.TablesFindUniqueArgs
  ): Promise<PrismaTables | null> {
    return this.prisma.tables.findUnique(args);
  }
  async createTables(args: Prisma.TablesCreateArgs): Promise<PrismaTables> {
    return this.prisma.tables.create(args);
  }
  async updateTables(args: Prisma.TablesUpdateArgs): Promise<PrismaTables> {
    return this.prisma.tables.update(args);
  }
  async deleteTables(args: Prisma.TablesDeleteArgs): Promise<PrismaTables> {
    return this.prisma.tables.delete(args);
  }

  async getWaiter(parentId: string): Promise<PrismaWaiter | null> {
    return this.prisma.tables
      .findUnique({
        where: { id: parentId },
      })
      .waiter();
  }
}
