/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tables } from "./Tables";
import { TablesCountArgs } from "./TablesCountArgs";
import { TablesFindManyArgs } from "./TablesFindManyArgs";
import { TablesFindUniqueArgs } from "./TablesFindUniqueArgs";
import { CreateTablesArgs } from "./CreateTablesArgs";
import { UpdateTablesArgs } from "./UpdateTablesArgs";
import { DeleteTablesArgs } from "./DeleteTablesArgs";
import { Waiter } from "../../waiter/base/Waiter";
import { TablesService } from "../tables.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tables)
export class TablesResolverBase {
  constructor(
    protected readonly service: TablesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "read",
    possession: "any",
  })
  async _tablesItemsMeta(
    @graphql.Args() args: TablesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tables])
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "read",
    possession: "any",
  })
  async tablesItems(
    @graphql.Args() args: TablesFindManyArgs
  ): Promise<Tables[]> {
    return this.service.tablesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tables, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "read",
    possession: "own",
  })
  async tables(
    @graphql.Args() args: TablesFindUniqueArgs
  ): Promise<Tables | null> {
    const result = await this.service.tables(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tables)
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "create",
    possession: "any",
  })
  async createTables(@graphql.Args() args: CreateTablesArgs): Promise<Tables> {
    return await this.service.createTables({
      ...args,
      data: {
        ...args.data,

        waiter: args.data.waiter
          ? {
              connect: args.data.waiter,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tables)
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "update",
    possession: "any",
  })
  async updateTables(
    @graphql.Args() args: UpdateTablesArgs
  ): Promise<Tables | null> {
    try {
      return await this.service.updateTables({
        ...args,
        data: {
          ...args.data,

          waiter: args.data.waiter
            ? {
                connect: args.data.waiter,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tables)
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "delete",
    possession: "any",
  })
  async deleteTables(
    @graphql.Args() args: DeleteTablesArgs
  ): Promise<Tables | null> {
    try {
      return await this.service.deleteTables(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Waiter, {
    nullable: true,
    name: "waiter",
  })
  @nestAccessControl.UseRoles({
    resource: "Waiter",
    action: "read",
    possession: "any",
  })
  async getWaiter(@graphql.Parent() parent: Tables): Promise<Waiter | null> {
    const result = await this.service.getWaiter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
