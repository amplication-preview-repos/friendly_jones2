/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TablesService } from "../tables.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TablesCreateInput } from "./TablesCreateInput";
import { Tables } from "./Tables";
import { TablesFindManyArgs } from "./TablesFindManyArgs";
import { TablesWhereUniqueInput } from "./TablesWhereUniqueInput";
import { TablesUpdateInput } from "./TablesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TablesControllerBase {
  constructor(
    protected readonly service: TablesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tables })
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTables(@common.Body() data: TablesCreateInput): Promise<Tables> {
    return await this.service.createTables({
      data: {
        ...data,

        waiter: data.waiter
          ? {
              connect: data.waiter,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tableNumber: true,
        status: true,

        waiter: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Tables] })
  @ApiNestedQuery(TablesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tablesItems(@common.Req() request: Request): Promise<Tables[]> {
    const args = plainToClass(TablesFindManyArgs, request.query);
    return this.service.tablesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tableNumber: true,
        status: true,

        waiter: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tables })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tables(
    @common.Param() params: TablesWhereUniqueInput
  ): Promise<Tables | null> {
    const result = await this.service.tables({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tableNumber: true,
        status: true,

        waiter: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tables })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTables(
    @common.Param() params: TablesWhereUniqueInput,
    @common.Body() data: TablesUpdateInput
  ): Promise<Tables | null> {
    try {
      return await this.service.updateTables({
        where: params,
        data: {
          ...data,

          waiter: data.waiter
            ? {
                connect: data.waiter,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tableNumber: true,
          status: true,

          waiter: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tables })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tables",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTables(
    @common.Param() params: TablesWhereUniqueInput
  ): Promise<Tables | null> {
    try {
      return await this.service.deleteTables({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tableNumber: true,
          status: true,

          waiter: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
