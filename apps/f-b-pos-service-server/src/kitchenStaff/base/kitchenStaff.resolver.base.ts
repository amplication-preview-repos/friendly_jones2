/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { KitchenStaff } from "./KitchenStaff";
import { KitchenStaffCountArgs } from "./KitchenStaffCountArgs";
import { KitchenStaffFindManyArgs } from "./KitchenStaffFindManyArgs";
import { KitchenStaffFindUniqueArgs } from "./KitchenStaffFindUniqueArgs";
import { DeleteKitchenStaffArgs } from "./DeleteKitchenStaffArgs";
import { KitchenStaffService } from "../kitchenStaff.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KitchenStaff)
export class KitchenStaffResolverBase {
  constructor(
    protected readonly service: KitchenStaffService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KitchenStaff",
    action: "read",
    possession: "any",
  })
  async _kitchenStaffsMeta(
    @graphql.Args() args: KitchenStaffCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KitchenStaff])
  @nestAccessControl.UseRoles({
    resource: "KitchenStaff",
    action: "read",
    possession: "any",
  })
  async kitchenStaffs(
    @graphql.Args() args: KitchenStaffFindManyArgs
  ): Promise<KitchenStaff[]> {
    return this.service.kitchenStaffs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KitchenStaff, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KitchenStaff",
    action: "read",
    possession: "own",
  })
  async kitchenStaff(
    @graphql.Args() args: KitchenStaffFindUniqueArgs
  ): Promise<KitchenStaff | null> {
    const result = await this.service.kitchenStaff(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KitchenStaff)
  @nestAccessControl.UseRoles({
    resource: "KitchenStaff",
    action: "delete",
    possession: "any",
  })
  async deleteKitchenStaff(
    @graphql.Args() args: DeleteKitchenStaffArgs
  ): Promise<KitchenStaff | null> {
    try {
      return await this.service.deleteKitchenStaff(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
