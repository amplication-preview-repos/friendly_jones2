/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FoodMenu } from "./FoodMenu";
import { FoodMenuCountArgs } from "./FoodMenuCountArgs";
import { FoodMenuFindManyArgs } from "./FoodMenuFindManyArgs";
import { FoodMenuFindUniqueArgs } from "./FoodMenuFindUniqueArgs";
import { CreateFoodMenuArgs } from "./CreateFoodMenuArgs";
import { UpdateFoodMenuArgs } from "./UpdateFoodMenuArgs";
import { DeleteFoodMenuArgs } from "./DeleteFoodMenuArgs";
import { FoodMenuService } from "../foodMenu.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FoodMenu)
export class FoodMenuResolverBase {
  constructor(
    protected readonly service: FoodMenuService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FoodMenu",
    action: "read",
    possession: "any",
  })
  async _foodMenusMeta(
    @graphql.Args() args: FoodMenuCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FoodMenu])
  @nestAccessControl.UseRoles({
    resource: "FoodMenu",
    action: "read",
    possession: "any",
  })
  async foodMenus(
    @graphql.Args() args: FoodMenuFindManyArgs
  ): Promise<FoodMenu[]> {
    return this.service.foodMenus(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FoodMenu, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FoodMenu",
    action: "read",
    possession: "own",
  })
  async foodMenu(
    @graphql.Args() args: FoodMenuFindUniqueArgs
  ): Promise<FoodMenu | null> {
    const result = await this.service.foodMenu(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FoodMenu)
  @nestAccessControl.UseRoles({
    resource: "FoodMenu",
    action: "create",
    possession: "any",
  })
  async createFoodMenu(
    @graphql.Args() args: CreateFoodMenuArgs
  ): Promise<FoodMenu> {
    return await this.service.createFoodMenu({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FoodMenu)
  @nestAccessControl.UseRoles({
    resource: "FoodMenu",
    action: "update",
    possession: "any",
  })
  async updateFoodMenu(
    @graphql.Args() args: UpdateFoodMenuArgs
  ): Promise<FoodMenu | null> {
    try {
      return await this.service.updateFoodMenu({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FoodMenu)
  @nestAccessControl.UseRoles({
    resource: "FoodMenu",
    action: "delete",
    possession: "any",
  })
  async deleteFoodMenu(
    @graphql.Args() args: DeleteFoodMenuArgs
  ): Promise<FoodMenu | null> {
    try {
      return await this.service.deleteFoodMenu(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
