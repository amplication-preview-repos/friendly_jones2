/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalesTransaction } from "./SalesTransaction";
import { SalesTransactionCountArgs } from "./SalesTransactionCountArgs";
import { SalesTransactionFindManyArgs } from "./SalesTransactionFindManyArgs";
import { SalesTransactionFindUniqueArgs } from "./SalesTransactionFindUniqueArgs";
import { CreateSalesTransactionArgs } from "./CreateSalesTransactionArgs";
import { UpdateSalesTransactionArgs } from "./UpdateSalesTransactionArgs";
import { DeleteSalesTransactionArgs } from "./DeleteSalesTransactionArgs";
import { SalesTransactionService } from "../salesTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalesTransaction)
export class SalesTransactionResolverBase {
  constructor(
    protected readonly service: SalesTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalesTransaction",
    action: "read",
    possession: "any",
  })
  async _salesTransactionsMeta(
    @graphql.Args() args: SalesTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalesTransaction])
  @nestAccessControl.UseRoles({
    resource: "SalesTransaction",
    action: "read",
    possession: "any",
  })
  async salesTransactions(
    @graphql.Args() args: SalesTransactionFindManyArgs
  ): Promise<SalesTransaction[]> {
    return this.service.salesTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalesTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalesTransaction",
    action: "read",
    possession: "own",
  })
  async salesTransaction(
    @graphql.Args() args: SalesTransactionFindUniqueArgs
  ): Promise<SalesTransaction | null> {
    const result = await this.service.salesTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalesTransaction)
  @nestAccessControl.UseRoles({
    resource: "SalesTransaction",
    action: "create",
    possession: "any",
  })
  async createSalesTransaction(
    @graphql.Args() args: CreateSalesTransactionArgs
  ): Promise<SalesTransaction> {
    return await this.service.createSalesTransaction({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalesTransaction)
  @nestAccessControl.UseRoles({
    resource: "SalesTransaction",
    action: "update",
    possession: "any",
  })
  async updateSalesTransaction(
    @graphql.Args() args: UpdateSalesTransactionArgs
  ): Promise<SalesTransaction | null> {
    try {
      return await this.service.updateSalesTransaction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesTransaction)
  @nestAccessControl.UseRoles({
    resource: "SalesTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteSalesTransaction(
    @graphql.Args() args: DeleteSalesTransactionArgs
  ): Promise<SalesTransaction | null> {
    try {
      return await this.service.deleteSalesTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
