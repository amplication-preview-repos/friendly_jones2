/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SalesTransaction as PrismaSalesTransaction,
} from "@prisma/client";

export class SalesTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalesTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salesTransaction.count(args);
  }

  async salesTransactions(
    args: Prisma.SalesTransactionFindManyArgs
  ): Promise<PrismaSalesTransaction[]> {
    return this.prisma.salesTransaction.findMany(args);
  }
  async salesTransaction(
    args: Prisma.SalesTransactionFindUniqueArgs
  ): Promise<PrismaSalesTransaction | null> {
    return this.prisma.salesTransaction.findUnique(args);
  }
  async createSalesTransaction(
    args: Prisma.SalesTransactionCreateArgs
  ): Promise<PrismaSalesTransaction> {
    return this.prisma.salesTransaction.create(args);
  }
  async updateSalesTransaction(
    args: Prisma.SalesTransactionUpdateArgs
  ): Promise<PrismaSalesTransaction> {
    return this.prisma.salesTransaction.update(args);
  }
  async deleteSalesTransaction(
    args: Prisma.SalesTransactionDeleteArgs
  ): Promise<PrismaSalesTransaction> {
    return this.prisma.salesTransaction.delete(args);
  }
}
