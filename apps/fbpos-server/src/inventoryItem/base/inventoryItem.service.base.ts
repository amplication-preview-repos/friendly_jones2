/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, InventoryItem as PrismaInventoryItem } from "@prisma/client";

export class InventoryItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InventoryItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inventoryItem.count(args);
  }

  async inventoryItems(
    args: Prisma.InventoryItemFindManyArgs
  ): Promise<PrismaInventoryItem[]> {
    return this.prisma.inventoryItem.findMany(args);
  }
  async inventoryItem(
    args: Prisma.InventoryItemFindUniqueArgs
  ): Promise<PrismaInventoryItem | null> {
    return this.prisma.inventoryItem.findUnique(args);
  }
  async createInventoryItem(
    args: Prisma.InventoryItemCreateArgs
  ): Promise<PrismaInventoryItem> {
    return this.prisma.inventoryItem.create(args);
  }
  async updateInventoryItem(
    args: Prisma.InventoryItemUpdateArgs
  ): Promise<PrismaInventoryItem> {
    return this.prisma.inventoryItem.update(args);
  }
  async deleteInventoryItem(
    args: Prisma.InventoryItemDeleteArgs
  ): Promise<PrismaInventoryItem> {
    return this.prisma.inventoryItem.delete(args);
  }
}
